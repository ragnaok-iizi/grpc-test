// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	calculator "github.com/ragnaok-iizi/grpc-test/service/grpc/calculator"
	counter "github.com/ragnaok-iizi/grpc-test/service/grpc/counter"
	uploader "github.com/ragnaok-iizi/grpc-test/service/grpc/uploader"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CalculatorServiceClient is the client API for CalculatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalculatorServiceClient interface {
	Sum(ctx context.Context, in *calculator.CalculatorReq, opts ...grpc.CallOption) (*calculator.CalculatorResp, error)
	Multiply(ctx context.Context, in *calculator.CalculatorReq, opts ...grpc.CallOption) (*calculator.CalculatorResp, error)
	Counter(ctx context.Context, in *counter.CounterReq, opts ...grpc.CallOption) (CalculatorService_CounterClient, error)
	Uploader(ctx context.Context, opts ...grpc.CallOption) (CalculatorService_UploaderClient, error)
}

type calculatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCalculatorServiceClient(cc grpc.ClientConnInterface) CalculatorServiceClient {
	return &calculatorServiceClient{cc}
}

func (c *calculatorServiceClient) Sum(ctx context.Context, in *calculator.CalculatorReq, opts ...grpc.CallOption) (*calculator.CalculatorResp, error) {
	out := new(calculator.CalculatorResp)
	err := c.cc.Invoke(ctx, "/grpc.CalculatorService/Sum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculatorServiceClient) Multiply(ctx context.Context, in *calculator.CalculatorReq, opts ...grpc.CallOption) (*calculator.CalculatorResp, error) {
	out := new(calculator.CalculatorResp)
	err := c.cc.Invoke(ctx, "/grpc.CalculatorService/Multiply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculatorServiceClient) Counter(ctx context.Context, in *counter.CounterReq, opts ...grpc.CallOption) (CalculatorService_CounterClient, error) {
	stream, err := c.cc.NewStream(ctx, &CalculatorService_ServiceDesc.Streams[0], "/grpc.CalculatorService/Counter", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorServiceCounterClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CalculatorService_CounterClient interface {
	Recv() (*counter.CounterResp, error)
	grpc.ClientStream
}

type calculatorServiceCounterClient struct {
	grpc.ClientStream
}

func (x *calculatorServiceCounterClient) Recv() (*counter.CounterResp, error) {
	m := new(counter.CounterResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calculatorServiceClient) Uploader(ctx context.Context, opts ...grpc.CallOption) (CalculatorService_UploaderClient, error) {
	stream, err := c.cc.NewStream(ctx, &CalculatorService_ServiceDesc.Streams[1], "/grpc.CalculatorService/Uploader", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorServiceUploaderClient{stream}
	return x, nil
}

type CalculatorService_UploaderClient interface {
	Send(*uploader.UploaderReq) error
	CloseAndRecv() (*uploader.UploaderResp, error)
	grpc.ClientStream
}

type calculatorServiceUploaderClient struct {
	grpc.ClientStream
}

func (x *calculatorServiceUploaderClient) Send(m *uploader.UploaderReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calculatorServiceUploaderClient) CloseAndRecv() (*uploader.UploaderResp, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(uploader.UploaderResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CalculatorServiceServer is the server API for CalculatorService service.
// All implementations must embed UnimplementedCalculatorServiceServer
// for forward compatibility
type CalculatorServiceServer interface {
	Sum(context.Context, *calculator.CalculatorReq) (*calculator.CalculatorResp, error)
	Multiply(context.Context, *calculator.CalculatorReq) (*calculator.CalculatorResp, error)
	Counter(*counter.CounterReq, CalculatorService_CounterServer) error
	Uploader(CalculatorService_UploaderServer) error
	mustEmbedUnimplementedCalculatorServiceServer()
}

// UnimplementedCalculatorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCalculatorServiceServer struct {
}

func (UnimplementedCalculatorServiceServer) Sum(context.Context, *calculator.CalculatorReq) (*calculator.CalculatorResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sum not implemented")
}
func (UnimplementedCalculatorServiceServer) Multiply(context.Context, *calculator.CalculatorReq) (*calculator.CalculatorResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Multiply not implemented")
}
func (UnimplementedCalculatorServiceServer) Counter(*counter.CounterReq, CalculatorService_CounterServer) error {
	return status.Errorf(codes.Unimplemented, "method Counter not implemented")
}
func (UnimplementedCalculatorServiceServer) Uploader(CalculatorService_UploaderServer) error {
	return status.Errorf(codes.Unimplemented, "method Uploader not implemented")
}
func (UnimplementedCalculatorServiceServer) mustEmbedUnimplementedCalculatorServiceServer() {}

// UnsafeCalculatorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalculatorServiceServer will
// result in compilation errors.
type UnsafeCalculatorServiceServer interface {
	mustEmbedUnimplementedCalculatorServiceServer()
}

func RegisterCalculatorServiceServer(s grpc.ServiceRegistrar, srv CalculatorServiceServer) {
	s.RegisterService(&CalculatorService_ServiceDesc, srv)
}

func _CalculatorService_Sum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(calculator.CalculatorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServiceServer).Sum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.CalculatorService/Sum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServiceServer).Sum(ctx, req.(*calculator.CalculatorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalculatorService_Multiply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(calculator.CalculatorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculatorServiceServer).Multiply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.CalculatorService/Multiply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculatorServiceServer).Multiply(ctx, req.(*calculator.CalculatorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalculatorService_Counter_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(counter.CounterReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CalculatorServiceServer).Counter(m, &calculatorServiceCounterServer{stream})
}

type CalculatorService_CounterServer interface {
	Send(*counter.CounterResp) error
	grpc.ServerStream
}

type calculatorServiceCounterServer struct {
	grpc.ServerStream
}

func (x *calculatorServiceCounterServer) Send(m *counter.CounterResp) error {
	return x.ServerStream.SendMsg(m)
}

func _CalculatorService_Uploader_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalculatorServiceServer).Uploader(&calculatorServiceUploaderServer{stream})
}

type CalculatorService_UploaderServer interface {
	SendAndClose(*uploader.UploaderResp) error
	Recv() (*uploader.UploaderReq, error)
	grpc.ServerStream
}

type calculatorServiceUploaderServer struct {
	grpc.ServerStream
}

func (x *calculatorServiceUploaderServer) SendAndClose(m *uploader.UploaderResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calculatorServiceUploaderServer) Recv() (*uploader.UploaderReq, error) {
	m := new(uploader.UploaderReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CalculatorService_ServiceDesc is the grpc.ServiceDesc for CalculatorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CalculatorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.CalculatorService",
	HandlerType: (*CalculatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sum",
			Handler:    _CalculatorService_Sum_Handler,
		},
		{
			MethodName: "Multiply",
			Handler:    _CalculatorService_Multiply_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Counter",
			Handler:       _CalculatorService_Counter_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Uploader",
			Handler:       _CalculatorService_Uploader_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "grpc/service.proto",
}
